// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mascota {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mascota   String
  foto      String
  usuario   Usuario[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model PreguntaPruebaDiagnostica {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pregunta                   String
  esPreguntaCerrada          Boolean?                     @default(true)
  opcionPruebaDiagnostica    OpcionPruebaDiagnostica[]
  respuestaPruebaDiagnostica RespuestaPruebaDiagnostica[]
  createdAt                  DateTime?                    @default(now())
  updatedAt                  DateTime?                    @updatedAt
}

model OpcionPruebaDiagnostica {
  id                          String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  opcion                      String
  esOpcionCorrecta            Boolean?
  preguntaPruebaDiagnosticaId String                       @db.Uuid
  preguntaPruebaDiagnostica   PreguntaPruebaDiagnostica    @relation(fields: [preguntaPruebaDiagnosticaId], references: [id])
  respuestaPruebaDiagnostica  RespuestaPruebaDiagnostica[]
  createdAt                   DateTime?                    @default(now())
  updatedAt                   DateTime?                    @updatedAt
}

model Usuario {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre                     String                       
  nombreUsuario              String                       @unique
  edad                       Int                          @db.Integer
  grado                      String                       @db.VarChar(2)
  colegio                    String                       
  mascotaId                  String                       @db.Uuid
  mascota                    Mascota                      @relation(fields: [mascotaId], references: [id])
  mascotaNombre              String                       @unique
  introduccionCompleta       Boolean                      @default(false)
  pruebaDiagnosticaCompleta  Boolean                      @default(false)
  tiempoPruebaDiagnostica    Int?
  sesion                     Int?                         @default(1)
  respuestaPruebaDiagnostica RespuestaPruebaDiagnostica[]
  objetoNaveReparado         ObjetoNaveReparado[]
  calificacionPylos          CalificacionPylos[]
  chatEmojis1                ChatEmojis[]  @relation("Usuario1")
  chatEmojis2                ChatEmojis[]  @relation("Usuario2")
  esAdmin                    Boolean?                     @default(false)
  createdAt                  DateTime?                    @default(now())
  updatedAt                  DateTime?                    @updatedAt
}

model RespuestaPruebaDiagnostica {
  id                          String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  respuesta                   String?
  usuarioId                   String                    @db.Uuid
  usuario                     Usuario                   @relation(fields: [usuarioId], references: [id])
  opcionPruebaDiagnosticaId   String?                   @db.Uuid
  opcionPruebaDiagnostica     OpcionPruebaDiagnostica?  @relation(fields: [opcionPruebaDiagnosticaId], references: [id])
  preguntaPruebaDiagnosticaId String                    @db.Uuid
  preguntaPruebaDiagnostica   PreguntaPruebaDiagnostica @relation(fields: [preguntaPruebaDiagnosticaId], references: [id])
  esRespuestaCorrecta         Boolean?
  createdAt                   DateTime?                 @default(now())
  updatedAt                   DateTime?                 @updatedAt
}

model ObjetoNaveReparado {
  id                          String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  objeto                      String
  planeta                     String
  usuarioId                   String                    @db.Uuid
  usuario                     Usuario                   @relation(fields: [usuarioId], references: [id])
  tiempoRespuesta             Int?
  sesion                      Int?                      @default(1)
  createdAt                   DateTime?                 @default(now())
  updatedAt                   DateTime?                 @updatedAt
}

model ChatEmojis {
  id                          String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  emoji                       String
  visualizado                 Boolean                   @default(false)
  usuario1Id                  String                    @db.Uuid
  usuario2Id                  String                    @db.Uuid
  usuario1                    Usuario                   @relation("Usuario1", fields: [usuario1Id], references: [id])
  usuario2                    Usuario                   @relation("Usuario2", fields: [usuario2Id], references: [id])
  createdAt                   DateTime?                 @default(now())
  updatedAt                   DateTime?                 @updatedAt
}

model CalificacionPylos {
  id                          String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  calificacion                String
  usuarioId                   String                    @db.Uuid
  usuario                     Usuario                   @relation(fields: [usuarioId], references: [id])
  createdAt                   DateTime?                 @default(now())
  updatedAt                   DateTime?                 @updatedAt
}
