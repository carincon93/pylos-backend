generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mascota {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mascota   String
  foto      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  usuario   Usuario[]
}

model PreguntaPruebaDiagnostica {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pregunta                   String
  createdAt                  DateTime?                    @default(now())
  updatedAt                  DateTime?                    @updatedAt
  esPreguntaCerrada          Boolean?                     @default(true)
  opcionPruebaDiagnostica    OpcionPruebaDiagnostica[]
  respuestaPruebaDiagnostica RespuestaPruebaDiagnostica[]
}

model OpcionPruebaDiagnostica {
  id                          String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  opcion                      String
  esOpcionCorrecta            Boolean?
  preguntaPruebaDiagnosticaId String                       @db.Uuid
  createdAt                   DateTime?                    @default(now())
  updatedAt                   DateTime?                    @updatedAt
  preguntaPruebaDiagnostica   PreguntaPruebaDiagnostica    @relation(fields: [preguntaPruebaDiagnosticaId], references: [id])
  respuestaPruebaDiagnostica  RespuestaPruebaDiagnostica[]
}

model Usuario {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre                     String
  edad                       Int
  grado                      String                       @db.VarChar(2)
  colegio                    String
  createdAt                  DateTime?                    @default(now())
  updatedAt                  DateTime?                    @updatedAt
  mascotaId                  String                       @db.Uuid
  mascotaNombre              String                       @unique
  nombreUsuario              String                       @unique
  introduccionCompleta       Boolean                      @default(false)
  tiempoPruebaDiagnostica    Int?
  esAdmin                    Boolean?                     @default(false)
  pruebaDiagnosticaCompleta  Boolean                      @default(false)
  sesion                     Int?                         @default(1)
  sesionPruebaDiagnostica    Int?                         @default(1)
  feedbackRespuesta          FeedbackRespuesta[]
  calificacionPylos          CalificacionPylos[]
  chatEmojis1                ChatEmojis[]                 @relation("Usuario1")
  chatEmojis2                ChatEmojis[]                 @relation("Usuario2")
  objetoNaveReparado         ObjetoNaveReparado[]
  respuestaPruebaDiagnostica RespuestaPruebaDiagnostica[]
  mascota                    Mascota                      @relation(fields: [mascotaId], references: [id])
}

model RespuestaPruebaDiagnostica {
  id                          String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  usuarioId                   String                    @db.Uuid
  opcionPruebaDiagnosticaId   String?                   @db.Uuid
  createdAt                   DateTime?                 @default(now())
  updatedAt                   DateTime?                 @updatedAt
  respuesta                   String?
  preguntaPruebaDiagnosticaId String                    @db.Uuid
  esRespuestaCorrecta         Boolean?
  sesion                      Int?                      @default(1)
  opcionPruebaDiagnostica     OpcionPruebaDiagnostica?  @relation(fields: [opcionPruebaDiagnosticaId], references: [id])
  preguntaPruebaDiagnostica   PreguntaPruebaDiagnostica @relation(fields: [preguntaPruebaDiagnosticaId], references: [id])
  usuario                     Usuario                   @relation(fields: [usuarioId], references: [id])
}

model ObjetoNaveReparado {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  objeto          String
  planeta         String
  usuarioId       String    @db.Uuid
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  tiempoRespuesta Int?
  sesion          Int?      @default(1)
  usuario         Usuario   @relation(fields: [usuarioId], references: [id])
}

model ChatEmojis {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  emoji       String
  usuario1Id  String    @db.Uuid
  usuario2Id  String    @db.Uuid
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  visualizado Boolean   @default(false)
  usuario1    Usuario   @relation("Usuario1", fields: [usuario1Id], references: [id])
  usuario2    Usuario   @relation("Usuario2", fields: [usuario2Id], references: [id])
}

model CalificacionPylos {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  calificacion String
  usuarioId    String    @db.Uuid
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  usuario      Usuario   @relation(fields: [usuarioId], references: [id])
}

model FeedbackRespuesta {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lecturaId    String
  preguntaId   String
  respuestaId  String
  sesion       Int
  usuarioId    String    @db.Uuid
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  usuario      Usuario   @relation(fields: [usuarioId], references: [id])
}
